#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
.. module:: fileio.py
   :platform: Unix
   :synopsis: Reads the meta data of a tomographic hdf5 file and generates a table (rst) compatible with sphynx/readthelogs.

"""

import os
import sys
import time
import argparse
import numpy as np
import pandas as pd
import dxchange
import tomopy
import matplotlib.pyplot as plt
from matplotlib.colors import NoNorm

from datetime import datetime

from mosaic import log
from mosaic import config
from mosaic import fileio
from mosaic import mosaic 

def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))

def status(args):
    config.show_config(args)

def extract(args):
    meta_dict = fileio.extract(args)
    for k, v in meta_dict.items():
        log.info("%s, %s, %s. Original file name: %s", k, meta_dict[k]['sample_x'], meta_dict[k]['sample_y'], meta_dict[k]['full_file_name'][0])

def sort(args):
    meta_dict = fileio.sort(args)
    for k, v in meta_dict.items():
        log.info("%s, %s, %s. Original file name: %s", k, meta_dict[k]['sample_x'], meta_dict[k]['sample_y'], meta_dict[k]['full_file_name'][0])

def tile(args):
    tile_dict, grid, x_shift, y_shift = fileio.tile(args)
    log.info('mosaic shift (x, y) in pixels: (%d, %d)' % (x_shift, y_shift))

    columns = [f'x_{num}' for num in range(grid.shape[0])]
    index = [f'y_{num}' for num in range(grid.shape[1])]
    log.info('mosaic file name grid:\n%s' % pd.DataFrame(grid, columns=columns, index=index))

def shift(args):
    tile_dict, grid, x_shift, y_shift = fileio.tile(args)
    log.info('mosaic shift (x, y) in pixels: (%d, %d)' % (x_shift, y_shift))

    columns = [f'x_{num}' for num in range(grid.shape[0])]
    index = [f'y_{num}' for num in range(grid.shape[0])]

    proj0, flat0, dark0, _, _ = dxchange.read_dx(grid[0,0], proj=(0, 10))
    proj1, flat1, dark1, _, _ = dxchange.read_dx(grid[0,1], proj=(0, 10))
    norm0 = tomopy.normalize(proj0, flat0, dark0)
    norm1 = tomopy.normalize(proj1, flat1, dark1)
    log.info('image   size (x, y) in pixels: (%d, %d)' % (norm0.shape[2], norm0.shape[1]))
    log.info('mosaic file name grid:\n%s' % pd.DataFrame(grid, columns=columns, index=index))

    plt.imshow(norm0[0,:,:],cmap='nipy_spectral',norm=NoNorm())
    plt.show()    
    plt.imshow(norm1[0,:,:],cmap='nipy_spectral',norm=NoNorm())
    plt.show()
    # print(norm0.shape)
    # mosaic.register_shift_sift(norm0, norm1)

def main():   
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    show_params     = config.MOSAIC_PARAMS
    extract_params  = config.MOSAIC_PARAMS
    sort_params     = config.MOSAIC_PARAMS
    tile_params     = config.MOSAIC_PARAMS
    shift_params    = config.MOSAIC_PARAMS

    cmd_parsers = [
        ('init',        init,           (),                 "Create configuration file"),
        ('status',      status,         show_params,        "Show the mosaic-cli status"),
        ('extract',     extract,        extract_params,     "Extract the mosaic tomography files"),
        ('sort',        sort,           sort_params,        "Sort the mosaic tomography files according to their tile location"),
        ('tile',        tile,           tile_params,        "Return the mosaic tiles"),
        ('shift',       shift,          shift_params,       "testing shift"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)

    # create logger
    logs_home = args.logs_home

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = os.path.join(logs_home, 'mosaic_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H_%M_%S") + '.log')

    log.setup_custom_logger(lfname)
    log.debug("Started mosaic")
    log.warning('Saving log at %s' % lfname)
    
    try: 
        # load args from default (config.py) if not changed
        config.log_values(args)
        args._func(args)
        # undate meta5.config file
        sections = config.MOSAIC_PARAMS
        config.write(args.config, args=args, sections=sections)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)

if __name__ == "__main__":
    main()
