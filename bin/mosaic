#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
.. module:: fileio.py
   :platform: Unix
   :synopsis: Reads the meta data of a tomographic hdf5 file and generates a table (rst) compatible with sphynx/readthelogs.

"""

import os
import sys
import time
import argparse
import numpy as np
import pandas as pd
from datetime import datetime

from mosaic import log
from mosaic import config
from mosaic import fileio
from mosaic import shift
from mosaic import stitch

def init(args):
    if not os.path.exists(str(args.config)):
        config.write(str(args.config))
    else:
        raise RuntimeError("{0} already exists".format(args.config))

def status(args):
    config.show_config(args)

def run_tile(args):
    tile_dict, grid, data_shape, x_shift, y_shift = fileio.tile(args)
    log.info('image   size (x, y) in pixels: (%d, %d)' % (data_shape[2], data_shape[1]))
    log.info('mosaic shift (x, y) in pixels: (%d, %d)' % (x_shift, y_shift))
    log.warning('tile overlap (x, y) in pixels: (%d, %d)' % (data_shape[2]-x_shift, data_shape[1]-y_shift))

    index = [f'x_{num}' for num in range(grid.shape[0])]
    columns = [f'y_{num}' for num in range(grid.shape[1])]
    log.info('mosaic file name grid:\n%s' % pd.DataFrame(grid, columns=columns, index=index))

def run_shift(args):
    if args.mode == 'auto':
        shift.shift_auto(args)
    else:
        shift.shift_manual(args)

def run_stitch(args):
    stitch.stitch(args)

def main():   
    parser = argparse.ArgumentParser()
    parser.add_argument('--config', **config.SECTIONS['general']['config'])
    show_params     = config.MOSAIC_PARAMS
    tile_params     = config.MOSAIC_PARAMS
    shift_params    = config.SHIFT_PARAMS
    stitch_params   = config.STITCH_PARAMS

    cmd_parsers = [
        ('init',        init,           (),                 "Create configuration file"),
        ('status',      status,         show_params,        "Show the mosaic-cli status"),
        ('tile',        run_tile,       tile_params,        "Show the file names in thier mosaic tile location"),
        ('shift',       run_shift,      shift_params,       "Calculate the tile horizonal and vertical overlap"),
        ('stitch',      run_stitch,     stitch_params,      "Create a single hdf file containing the mosaic datasets"),
    ]

    subparsers = parser.add_subparsers(title="Commands", metavar='')

    for cmd, func, sections, text in cmd_parsers:
        cmd_params = config.Params(sections=sections)
        cmd_parser = subparsers.add_parser(cmd, help=text, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        cmd_parser = cmd_params.add_arguments(cmd_parser)
        cmd_parser.set_defaults(_func=func)

    args = config.parse_known_args(parser, subparser=True)

    # create logger
    logs_home = args.logs_home

    # make sure logs directory exists
    if not os.path.exists(logs_home):
        os.makedirs(logs_home)

    lfname = os.path.join(logs_home, 'mosaic_' + datetime.strftime(datetime.now(), "%Y-%m-%d_%H_%M_%S") + '.log')

    log.setup_custom_logger(lfname)
    log.debug("Started mosaic")
    log.warning('Saving log at %s' % lfname)
    
    mosaic_home = os.path.join(args.folder_name, 'mosaic')
    if not os.path.exists(mosaic_home):
        os.makedirs(mosaic_home)    
    
    args.mosaic_fname = os.path.join(mosaic_home, 'mosaic.h5')

    try: 
        # load args from default (config.py) if not changed
        config.log_values(args)
        args._func(args)
        # undate meta5.config file
        sections = config.MOSAIC_PARAMS
        config.write(args.config, args=args, sections=sections)
    except RuntimeError as e:
        log.error(str(e))
        sys.exit(1)

if __name__ == "__main__":
    main()
